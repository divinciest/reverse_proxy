# HTTP server (redirects to HTTPS)
server {
    listen 80;
    listen [::]:80;
    server_name advisorassist.ai www.advisorassist.ai;

    # Redirect HTTP to HTTPS
    return 301 https://$host$request_uri;
}

# HTTPS server for both www and non-www domains
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name advisorassist.ai www.advisorassist.ai;

    # SSL Certificate
    ssl_certificate /etc/letsencrypt/live/advisorassist.ai/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/advisorassist.ai/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # --- Fallback Location ---
    # This named location will serve your fallback HTML file.
    location @fallback {
        root /usr/share/nginx/html; # Base directory for your static files

        # Disable sendfile for this location
        sendfile off;

        # Disable caching for the fallback file (client-side)
        expires -1;
        add_header 'Cache-Control' 'no-cache, no-store, must-revalidate';
        add_header 'Pragma' 'no-cache';
        add_header 'Expires' '0';

        # The fallback file is /usr/share/nginx/html/cached_pages/www.advisorassist.ai.html
        try_files /cached_pages/www.advisorassist.ai.html =503; # Serve the file. If it's missing, return 503.
        default_type text/html; # Ensure correct Content-Type for the HTML file.
    }

    # --- Internal Location for API Health Check ---
    # This location is only accessible by internal Nginx requests (like auth_request).
    location = /_health_check_api_internal {
        internal;

        # Proxy the request to your API health endpoint.
        # This matches your backend setup for api.advisorassist.ai.
        proxy_pass https://api.advisorassist.ai/api/health;

        # Set necessary proxy headers. The Host header is crucial.
        proxy_set_header Host "api.advisorassist.ai";
        # Clear potentially sensitive headers for an internal health check
        proxy_set_header X-Real-IP "";
        proxy_set_header X-Forwarded-For "";
        proxy_set_header X-Forwarded-Proto "";
        proxy_set_header Authorization ""; # Clear any inherited Authorization header

        # Set short timeouts for a health check. Adjust as needed.
        proxy_connect_timeout 2s;
        proxy_send_timeout 2s;
        proxy_read_timeout 2s;

        # Intercept errors from the proxy. If the API returns 503 (unhealthy),
        # Nginx will see it as an error to be handled.
        proxy_intercept_errors on;
    }

    # --- Main Location ---
    # This is where your normal static file serving logic resides.
    location / {
        # Perform the API health check using auth_request.
        auth_request /_health_check_api_internal;

        # Handle failures from auth_request.
        # If the /_health_check_api_internal subrequest results in an error
        # (e.g., API returns non-2xx, or there's a proxy error like timeout/connection refused),
        # auth_request usually causes the main request to get a 500 status.
        # We catch this 500 error and redirect internally to the @fallback location.
        error_page 500 = @fallback;

        # If auth_request was successful (API is healthy):
        root /usr/share/nginx/html;
        index index.html;
        try_files $uri $uri/ /index.html; # Your existing static file serving logic
    }
}