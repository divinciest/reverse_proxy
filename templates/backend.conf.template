# HTTPS server for {{ domain }} (only for non-localhost domains)
{% if not domain.endswith('.localhost') and domain != 'localhost' %}
server {
    listen 443 ssl http2;
    server_name {{ domain }};
    
    # SSL Certificate
    ssl_certificate /etc/letsencrypt/live/{{ domain }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ domain }}/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    
    # Upload size limit
    client_max_body_size 0;
    
    # Keep-alive settings
    keepalive_timeout 1200s;
    
    # Health check endpoint
    location = /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Backend proxy to localhost
    location / {
        proxy_pass http://localhost:{{ backend_port }};
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_http_version 1.1;
        proxy_read_timeout 3000s;
        proxy_buffering off;
        proxy_cache off;
    }
    
    access_log /var/log/nginx/{{ domain }}_access.log;
    error_log /var/log/nginx/{{ domain }}_error.log;
}
{% endif %}

# HTTP server for localhost domains (development mode)
{% if domain.endswith('.localhost') or domain == 'localhost' %}
server {
    listen 80;
    server_name {{ domain }};
    
    # Upload size limit
    client_max_body_size 0;
    
    # Keep-alive settings
    keepalive_timeout 1200s;
    
    # Health check endpoint
    location = /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Backend proxy to localhost
    location / {
        proxy_pass http://localhost:{{ backend_port }};
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_http_version 1.1;
        proxy_read_timeout 3000s;
        proxy_buffering off;
        proxy_cache off;
    }
    
    access_log /var/log/nginx/{{ domain }}_access.log;
    error_log /var/log/nginx/{{ domain }}_error.log;
}
{% endif %} 