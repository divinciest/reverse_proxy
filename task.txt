TASK: Transform single web application into generic multi-host reverse proxy

COMPLETED:
1. Created generic reverse proxy architecture with dynamic configuration
2. Implemented YAML-based host configuration system
3. Created template-based nginx configuration generation
4. Implemented automatic SSL certificate management via Let's Encrypt
5. Added localhost port forwarding for backend services
6. Created static file delivery system with SPA routing
7. Implemented health monitoring and certificate renewal
8. Updated Docker configuration for generic setup

KEY FEATURES:
- Multi-host support via config/hosts.yaml
- Dynamic nginx config generation from templates
- Automatic SSL certificate generation for all domains
- Localhost port forwarding (no Docker network dependencies)
- Static file serving with SPA routing
- Always SSL (no HTTP fallbacks)
- Health monitoring and certificate renewal
- Completely generic and independent

FILES CREATED:
- config/hosts.yaml (main configuration)
- templates/frontend.conf.template (frontend nginx template)
- templates/backend.conf.template (backend nginx template)
- templates/http-challenge.conf.template (SSL challenge template)
- scripts/config-generator.py (dynamic config generation)
- scripts/cert-manager.py (certificate management)
- scripts/health-checker.py (health monitoring)
- Dockerfile (generic reverse proxy)
- nginx.conf (base nginx config)
- options-ssl-nginx.conf (SSL options)
- startup.sh (dynamic startup script)
- docker-compose.yml (updated for generic setup)
- static/default/index.html (default page) 